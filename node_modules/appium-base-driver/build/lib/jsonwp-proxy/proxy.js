'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _jsonwpStatusStatus = require('../jsonwp-status/status');

var _protocolErrors = require('../protocol/errors');

var _basedriverDriver = require('../basedriver/driver');

var _basedriverDriver2 = _interopRequireDefault(_basedriverDriver);

var _protocolRoutes = require('../protocol/routes');

var log = _appiumSupport.logger.getLogger('JSONWP Proxy');
// TODO: Make this value configurable as a server side capability
var LOG_OBJ_LENGTH = 1024; // MAX LENGTH Logged to file / console
var DEFAULT_REQUEST_TIMEOUT = 240000;

var COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: function jsonwpConverter(url) {
    return url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute');
  },
  w3cConverter: function w3cConverter(url) {
    return url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync');
  }
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: function jsonwpConverter(url) {
    return url.replace(/\/element\/([^\/]+)\/screenshot$/, '/screenshot/$1');
  },
  w3cConverter: function w3cConverter(url) {
    return url.replace(/\/screenshot\/([^\/]+)/, '/element/$1/screenshot');
  }
}];

var _BaseDriver$DRIVER_PROTOCOL = _basedriverDriver2['default'].DRIVER_PROTOCOL;
var MJSONWP = _BaseDriver$DRIVER_PROTOCOL.MJSONWP;
var W3C = _BaseDriver$DRIVER_PROTOCOL.W3C;

var JWProxy = (function () {
  function JWProxy() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, JWProxy);

    _Object$assign(this, {
      scheme: 'http',
      server: 'localhost',
      port: 4444,
      base: '/wd/hub',
      sessionId: null,
      timeout: DEFAULT_REQUEST_TIMEOUT
    }, opts);
    this.scheme = this.scheme.toLowerCase();
    this._activeRequests = [];
  }

  // abstract the call behind a member function
  // so that we can mock it in tests

  _createClass(JWProxy, [{
    key: 'request',
    value: function request() {
      var currentRequest,
          args$2$0 = arguments;
      return _regeneratorRuntime.async(function request$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            currentRequest = _requestPromise2['default'].apply(undefined, args$2$0);

            this._activeRequests.push(currentRequest);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(currentRequest['finally'](function () {
              return _lodash2['default'].pull(_this._activeRequests, currentRequest);
            }));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getActiveRequestsCount',
    value: function getActiveRequestsCount() {
      return this._activeRequests.length;
    }
  }, {
    key: 'cancelActiveRequests',
    value: function cancelActiveRequests() {
      try {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = _getIterator(this._activeRequests), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var r = _step.value;

            r.cancel();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } finally {
        this._activeRequests = [];
      }
    }
  }, {
    key: 'endpointRequiresSessionId',
    value: function endpointRequiresSessionId(endpoint) {
      return !_lodash2['default'].includes(['/session', '/sessions', '/status'], endpoint);
    }
  }, {
    key: 'getUrlForProxy',
    value: function getUrlForProxy(url) {
      if (url === '') {
        url = '/';
      }
      var proxyBase = this.scheme + '://' + this.server + ':' + this.port + this.base;
      var endpointRe = '(/(session|status))';
      var remainingUrl = '';
      if (/^http/.test(url)) {
        var first = new RegExp('(https?://.+)' + endpointRe).exec(url);
        if (!first) {
          throw new Error('Got a complete url but could not extract JWP endpoint');
        }
        remainingUrl = url.replace(first[1], '');
      } else if (new RegExp('^/').test(url)) {
        remainingUrl = url;
      } else {
        throw new Error('Did not know what to do with url \'' + url + '\'');
      }

      var stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');
      if (stripPrefixRe.test(remainingUrl)) {
        remainingUrl = stripPrefixRe.exec(remainingUrl)[1];
      }

      if (!new RegExp(endpointRe).test(remainingUrl)) {
        remainingUrl = '/session/' + this.sessionId + remainingUrl;
      }

      var requiresSessionId = this.endpointRequiresSessionId(remainingUrl);

      if (requiresSessionId && this.sessionId === null) {
        throw new Error('Trying to proxy a session command without session id');
      }

      var sessionBaseRe = new RegExp('^/session/([^/]+)');
      if (sessionBaseRe.test(remainingUrl)) {
        // we have something like /session/:id/foobar, so we need to replace
        // the session id
        var match = sessionBaseRe.exec(remainingUrl);
        remainingUrl = remainingUrl.replace(match[1], this.sessionId);
      } else if (requiresSessionId) {
        throw new Error('Could not find :session section for url: ' + remainingUrl);
      }
      remainingUrl = remainingUrl.replace(/\/$/, ''); // can't have trailing slashes

      return proxyBase + remainingUrl;
    }
  }, {
    key: 'proxy',
    value: function proxy(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
      var newUrl, reqOpts, res, resBody, resBodyObj, message, err, responseError;
      return _regeneratorRuntime.async(function proxy$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            method = method.toUpperCase();
            newUrl = this.getUrlForProxy(url);
            reqOpts = {
              url: newUrl,
              method: method,
              headers: {
                'content-type': 'application/json; charset=utf-8',
                'user-agent': 'appium',
                accept: '*/*'
              },
              resolveWithFullResponse: true,
              timeout: this.timeout,
              forever: true
            };

            if (body !== null) {
              if (typeof body !== 'object') {
                body = JSON.parse(body);
              }
              reqOpts.json = body;
            }

            // GET methods shouldn't have any body. Most servers are OK with this, but WebDriverAgent throws 400 errors
            if (method === 'GET') {
              reqOpts.json = null;
            }

            log.debug('Proxying [' + method + ' ' + (url || "/") + '] to [' + method + ' ' + newUrl + '] ' + (body ? 'with body: ' + _lodash2['default'].truncate(JSON.stringify(body), { length: LOG_OBJ_LENGTH }) : 'with no body'));

            res = undefined, resBody = undefined;
            context$2$0.prev = 7;
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.request(reqOpts));

          case 10:
            res = context$2$0.sent;

            resBody = res.body;
            log.debug('Got response with status ' + res.statusCode + ': ' + _lodash2['default'].truncate(JSON.stringify(resBody), { length: LOG_OBJ_LENGTH }));
            if (/\/session$/.test(url) && method === 'POST') {
              if (res.statusCode === 200) {
                this.sessionId = resBody.sessionId;
              } else if (res.statusCode === 303) {
                this.sessionId = /\/session\/([^\/]+)/.exec(resBody)[1];
              }
            }
            resBodyObj = _appiumSupport.util.safeJsonParse(resBody);

            if (!this._downstreamProtocol) {
              this._downstreamProtocol = this.getProtocolFromResBody(resBodyObj);
            }

            if (!(res.statusCode < 400 && this._downstreamProtocol === MJSONWP && parseInt(resBodyObj.status, 10) !== 0)) {
              context$2$0.next = 23;
              break;
            }

            message = 'The request to ' + url + ' has failed';
            err = new Error(message);

            err.message = message;
            err.error = resBody;
            err.statusCode = 500;
            throw err;

          case 23:
            context$2$0.next = 30;
            break;

          case 25:
            context$2$0.prev = 25;
            context$2$0.t0 = context$2$0['catch'](7);
            responseError = undefined;

            try {
              responseError = JSON.parse(context$2$0.t0.error);
            } catch (e1) {
              if (!_lodash2['default'].isEmpty(context$2$0.t0.error) && _lodash2['default'].isString(context$2$0.t0.error)) {
                log.warn('Got an unexpected response: ' + _lodash2['default'].truncate(context$2$0.t0.error, { length: 300 }));
              }
              responseError = _lodash2['default'].isPlainObject(context$2$0.t0.error) ? context$2$0.t0.error : null;
            }
            throw new _protocolErrors.errors.ProxyRequestError('Could not proxy command to remote server. ' + ('Original error: ' + context$2$0.t0.message), responseError, context$2$0.t0.statusCode);

          case 30:
            return context$2$0.abrupt('return', [res, resBody]);

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 25]]);
    }

    /**
     * W3C /timeouts can take as many as 3 timeout types at once, MJSONWP /timeouts only takes one
     * at a time. So if we're using W3C and proxying to MJSONWP and there's more than one timeout type
     * provided in the request, we need to do 3 proxies and combine the result
     *
     * @param {Object} body Request body
     * @return {Array} Array of W3C + MJSONWP compatible timeout objects
     */
  }, {
    key: 'getTimeoutRequestObjects',
    value: function getTimeoutRequestObjects(body) {
      var downstreamProtocol, typeToW3C, _ret;

      return _regeneratorRuntime.async(function getTimeoutRequestObjects$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            downstreamProtocol = undefined;
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.getDownstreamProtocol());

          case 4:
            downstreamProtocol = context$2$0.sent;
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](1);

            log.warn(context$2$0.t0);

          case 10:
            if (downstreamProtocol) {
              context$2$0.next = 13;
              break;
            }

            log.warn('The downstream protocol cannot be detected. Proxying the request body to /timeouts as is');
            return context$2$0.abrupt('return', [body]);

          case 13:
            if (!(downstreamProtocol === W3C && _lodash2['default'].has(body, 'ms') && _lodash2['default'].has(body, 'type'))) {
              context$2$0.next = 16;
              break;
            }

            typeToW3C = function typeToW3C(x) {
              return x === 'page load' ? 'pageLoad' : x;
            };

            return context$2$0.abrupt('return', [_defineProperty({}, typeToW3C(body.type), body.ms)]);

          case 16:
            if (!(downstreamProtocol === MJSONWP && (!_lodash2['default'].has(body, 'ms') || !_lodash2['default'].has(body, 'type')))) {
              context$2$0.next = 20;
              break;
            }

            _ret = (function () {
              var typeToJSONWP = function typeToJSONWP(x) {
                return x === 'pageLoad' ? 'page load' : x;
              };
              return {
                v: _lodash2['default'].toPairs(body).filter(function (pair) {
                  return !isNaN(parseFloat(pair[1]));
                }).map(function (pair) {
                  return {
                    type: typeToJSONWP(pair[0]),
                    ms: pair[1]
                  };
                })
              };
            })();

            if (!(typeof _ret === 'object')) {
              context$2$0.next = 20;
              break;
            }

            return context$2$0.abrupt('return', _ret.v);

          case 20:
            return context$2$0.abrupt('return', [body]);

          case 21:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 7]]);
    }

    /**
     * Proxy an array of timeout objects and merge the result
     * @param {String} url Endpoint url
     * @param {String} method Endpoint method
     * @param {Object} body Request body
     */
  }, {
    key: 'proxySetTimeouts',
    value: function proxySetTimeouts(url, method, body) {
      var response, resBody, timeoutRequestObjects, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, timeoutObj, _ref2, _ref22, protocol;

      return _regeneratorRuntime.async(function proxySetTimeouts$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            response = undefined, resBody = undefined;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getTimeoutRequestObjects(body));

          case 3:
            timeoutRequestObjects = context$2$0.sent;

            log.debug('Will send the following request bodies to /timeouts: ' + JSON.stringify(timeoutRequestObjects));
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$2$0.prev = 8;
            _iterator2 = _getIterator(timeoutRequestObjects);

          case 10:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$2$0.next = 26;
              break;
            }

            timeoutObj = _step2.value;
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.proxy(url, method, timeoutObj));

          case 14:
            _ref2 = context$2$0.sent;
            _ref22 = _slicedToArray(_ref2, 2);
            response = _ref22[0];
            resBody = _ref22[1];
            protocol = this.getProtocolFromResBody(resBody);

            if (!(protocol !== MJSONWP)) {
              context$2$0.next = 21;
              break;
            }

            return context$2$0.abrupt('return', [response, resBody]);

          case 21:
            if (!(response.statusCode >= 400)) {
              context$2$0.next = 23;
              break;
            }

            return context$2$0.abrupt('return', [response, resBody]);

          case 23:
            _iteratorNormalCompletion2 = true;
            context$2$0.next = 10;
            break;

          case 26:
            context$2$0.next = 32;
            break;

          case 28:
            context$2$0.prev = 28;
            context$2$0.t0 = context$2$0['catch'](8);
            _didIteratorError2 = true;
            _iteratorError2 = context$2$0.t0;

          case 32:
            context$2$0.prev = 32;
            context$2$0.prev = 33;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 35:
            context$2$0.prev = 35;

            if (!_didIteratorError2) {
              context$2$0.next = 38;
              break;
            }

            throw _iteratorError2;

          case 38:
            return context$2$0.finish(35);

          case 39:
            return context$2$0.finish(32);

          case 40:
            return context$2$0.abrupt('return', [response, resBody]);

          case 41:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[8, 28, 32, 40], [33,, 35, 39]]);
    }
  }, {
    key: 'getProtocolFromResBody',
    value: function getProtocolFromResBody(resBody) {
      if (!_lodash2['default'].isPlainObject(resBody)) {
        try {
          resBody = JSON.parse(resBody);
        } catch (err) {
          return;
        }
      }
      if (_appiumSupport.util.hasValue(resBody.status)) {
        return MJSONWP;
      }
      if (_appiumSupport.util.hasValue(resBody.value)) {
        return W3C;
      }
    }
  }, {
    key: 'getDownstreamProtocol',
    value: function getDownstreamProtocol() {
      var _ref3, _ref32, resBody;

      return _regeneratorRuntime.async(function getDownstreamProtocol$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this._downstreamProtocol) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.proxy('/status', 'GET'));

          case 3:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            resBody = _ref32[1];

            this._downstreamProtocol = this.getProtocolFromResBody(resBody);

          case 7:
            return context$2$0.abrupt('return', this._downstreamProtocol);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'requestToCommandName',
    value: function requestToCommandName(url, method) {
      var extractCommandName = function extractCommandName(pattern) {
        var pathMatch = pattern.exec(url);
        return pathMatch ? (0, _protocolRoutes.routeToCommandName)(pathMatch[1], method) : null;
      };
      var commandName = (0, _protocolRoutes.routeToCommandName)(url, method);
      if (!commandName && _lodash2['default'].includes(url, '/wd/hub/session/')) {
        commandName = extractCommandName(/\/wd\/hub\/session\/[^\/]+(.+)/);
      }
      if (!commandName && _lodash2['default'].includes(url, '/wd/hub/')) {
        commandName = extractCommandName(/\/wd\/hub(\/.+)/);
      }
      return commandName;
    }
  }, {
    key: 'proxyCommand',
    value: function proxyCommand(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var commandName, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _step3$value,

      // Same arguments, but different URLs

      commandNames, jsonwpConverter, w3cConverter, downstreamProtocol, rewrittenUrl;

      return _regeneratorRuntime.async(function proxyCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            commandName = this.requestToCommandName(url, method);

            if (commandName) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.proxy(url, method, body));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
            log.debug('Matched \'' + url + '\' to command name \'' + commandName + '\'');

            // Handle "crossing" endpoints for the case
            // when upstream and downstream drivers operate different protocols

            // Same url, but different arguments

            if (!(commandName === 'timeouts')) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.proxySetTimeouts(url, method, body));

          case 9:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 10:
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$2$0.prev = 13;
            _iterator3 = _getIterator(COMMAND_URLS_CONFLICTS);

          case 15:
            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
              context$2$0.next = 46;
              break;
            }

            _step3$value = _step3.value;
            commandNames = _step3$value.commandNames;
            jsonwpConverter = _step3$value.jsonwpConverter;
            w3cConverter = _step3$value.w3cConverter;

            if (commandNames.includes(commandName)) {
              context$2$0.next = 22;
              break;
            }

            return context$2$0.abrupt('continue', 43);

          case 22:
            downstreamProtocol = undefined;
            context$2$0.prev = 23;
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.getDownstreamProtocol());

          case 26:
            downstreamProtocol = context$2$0.sent;
            context$2$0.next = 32;
            break;

          case 29:
            context$2$0.prev = 29;
            context$2$0.t0 = context$2$0['catch'](23);

            log.warn(context$2$0.t0);

          case 32:
            if (downstreamProtocol) {
              context$2$0.next = 35;
              break;
            }

            log.warn('The downstream protocol cannot be detected. Proxying as is');
            return context$2$0.abrupt('break', 46);

          case 35:
            rewrittenUrl = downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

            if (!(rewrittenUrl === url)) {
              context$2$0.next = 39;
              break;
            }

            log.debug('Did not know how to rewrite the original URL \'' + url + '\' ' + ('for ' + downstreamProtocol + ' protocol'));
            return context$2$0.abrupt('break', 46);

          case 39:
            log.info('Rewrote the original URL \'' + url + '\' to \'' + rewrittenUrl + '\' ' + ('for ' + downstreamProtocol + ' protocol'));
            context$2$0.next = 42;
            return _regeneratorRuntime.awrap(this.proxy(rewrittenUrl, method, body));

          case 42:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 43:
            _iteratorNormalCompletion3 = true;
            context$2$0.next = 15;
            break;

          case 46:
            context$2$0.next = 52;
            break;

          case 48:
            context$2$0.prev = 48;
            context$2$0.t1 = context$2$0['catch'](13);
            _didIteratorError3 = true;
            _iteratorError3 = context$2$0.t1;

          case 52:
            context$2$0.prev = 52;
            context$2$0.prev = 53;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 55:
            context$2$0.prev = 55;

            if (!_didIteratorError3) {
              context$2$0.next = 58;
              break;
            }

            throw _iteratorError3;

          case 58:
            return context$2$0.finish(55);

          case 59:
            return context$2$0.finish(52);

          case 60:
            context$2$0.next = 62;
            return _regeneratorRuntime.awrap(this.proxy(url, method, body));

          case 62:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 63:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[13, 48, 52, 60], [23, 29], [53,, 55, 59]]);
    }
  }, {
    key: 'command',
    value: function command(url, method) {
      var body = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

      var response, resBody, _ref4, _ref42, protocol, _status, message;

      return _regeneratorRuntime.async(function command$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            response = undefined;
            resBody = undefined;
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.proxyCommand(url, method, body));

          case 5:
            _ref4 = context$2$0.sent;
            _ref42 = _slicedToArray(_ref4, 2);
            response = _ref42[0];
            resBody = _ref42[1];
            context$2$0.next = 16;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](2);

            if (!(0, _protocolErrors.isErrorType)(context$2$0.t0, _protocolErrors.errors.ProxyRequestError)) {
              context$2$0.next = 15;
              break;
            }

            throw context$2$0.t0.getActualError();

          case 15:
            throw new _protocolErrors.errors.UnknownError(context$2$0.t0.message);

          case 16:
            resBody = _appiumSupport.util.safeJsonParse(resBody);
            protocol = this.getProtocolFromResBody(resBody);

            if (!(protocol === MJSONWP)) {
              context$2$0.next = 28;
              break;
            }

            if (!(response.statusCode === 200 && resBody.status === 0)) {
              context$2$0.next = 21;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 21:
            _status = parseInt(resBody.status, 10);

            if (!(!isNaN(_status) && _status !== 0)) {
              context$2$0.next = 26;
              break;
            }

            message = resBody.value;

            if (_lodash2['default'].has(resBody.value, 'message')) {
              message = _lodash2['default'].isEmpty(message) ? resBody.value.message : message + ' ' + resBody.value.message;
            }
            throw (0, _protocolErrors.errorFromMJSONWPStatusCode)(_status, _lodash2['default'].isEmpty(message) ? (0, _jsonwpStatusStatus.getSummaryByCode)(_status) : message);

          case 26:
            context$2$0.next = 37;
            break;

          case 28:
            if (!(protocol === W3C)) {
              context$2$0.next = 35;
              break;
            }

            if (!(response.statusCode < 300)) {
              context$2$0.next = 31;
              break;
            }

            return context$2$0.abrupt('return', resBody.value);

          case 31:
            if (!(_lodash2['default'].isPlainObject(resBody.value) && resBody.value.error)) {
              context$2$0.next = 33;
              break;
            }

            throw (0, _protocolErrors.errorFromW3CJsonCode)(resBody.value.error, resBody.value.message, resBody.value.stacktrace);

          case 33:
            context$2$0.next = 37;
            break;

          case 35:
            if (!(response.statusCode === 200)) {
              context$2$0.next = 37;
              break;
            }

            return context$2$0.abrupt('return', resBody);

          case 37:
            throw new _protocolErrors.errors.UnknownError('Did not know what to do with response code \'' + response.statusCode + '\' ' + ('and response body \'' + _lodash2['default'].truncate(JSON.stringify(resBody), { length: 300 }) + '\''));

          case 38:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 11]]);
    }
  }, {
    key: 'getSessionIdFromUrl',
    value: function getSessionIdFromUrl(url) {
      var match = url.match(/\/session\/([^\/]+)/);
      return match ? match[1] : null;
    }
  }, {
    key: 'proxyReqRes',
    value: function proxyReqRes(req, res) {
      var _ref5, _ref52, response, body, reqSessionId;

      return _regeneratorRuntime.async(function proxyReqRes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.proxyCommand(req.originalUrl, req.method, req.body));

          case 2:
            _ref5 = context$2$0.sent;
            _ref52 = _slicedToArray(_ref5, 2);
            response = _ref52[0];
            body = _ref52[1];

            res.headers = response.headers;
            res.set('content-type', response.headers['content-type']);
            // if the proxied response contains a sessionId that the downstream
            // driver has generated, we don't want to return that to the client.
            // Instead, return the id from the request or from current session
            body = _appiumSupport.util.safeJsonParse(body);
            if (body && body.sessionId) {
              reqSessionId = this.getSessionIdFromUrl(req.originalUrl);

              if (reqSessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + reqSessionId);
                body.sessionId = reqSessionId;
              } else if (this.sessionId) {
                log.info('Replacing sessionId ' + body.sessionId + ' with ' + this.sessionId);
                body.sessionId = this.sessionId;
              }
            }
            res.status(response.statusCode).send(JSON.stringify(body));

          case 11:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return JWProxy;
})();

exports['default'] = JWProxy;
module.exports = exports['default'];

// Some servers, like chromedriver may return response code 200 for non-zero JSONWP statuses

// If we got a non-MJSONWP response, return the result, nothing left to do

// If we got an error, return the error right away

// ...Otherwise, continue to the next timeouts call

// No matches found. Proceed normally

// Got response in MJSONWP format

// Got response in W3C format

// Unknown protocol. Keeping it because of the backward compatibility
//# sourceMappingURL=data:application/json;charset=utf8;base64,
